(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{588:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"模板编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板编译"}},[t._v("#")]),t._v(" 模板编译")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://vue-js.com/learn-vue/complie/#_1-%E5%89%8D%E8%A8%80",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue模板编译文档详解"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("（Vue把用户在 "),a("code",[t._v("<template></template>")]),t._v("标签中写的类似于原生HTML的内容进行编译，把原生HTML的内容找出来，再把非原生HTML找出来，经过一系列的逻辑处理生成渲染函数，也就是 "),a("code",[t._v("render函数")]),t._v("，这一过程称之为 "),a("strong",[t._v("模板编译过程")]),t._v("），而 "),a("strong",[t._v("render函数会将模板内容生成对应的VNode，而VNode再经过patch过程从而得到将要渲染的视图中的VNode，最后根据VNode创建真实的DOM节点并插入到视图中")]),t._v("，最终完成视图的渲染更新。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/1.f0570125.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"模板编译流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板编译流程"}},[t._v("#")]),t._v(" 模板编译流程")]),t._v(" "),a("blockquote",[a("p",[t._v("模板编译内部是怎样把用户写的模板经过处理最终生成render函数的呢？")])]),t._v(" "),a("h3",{attrs:{id:"_1-抽象语法树ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-抽象语法树ast"}},[t._v("#")]),t._v(" （1）抽象语法树AST")]),t._v(" "),a("p",[a("strong",[t._v("抽象语法树")]),t._v("（"),a("strong",[t._v("A")]),t._v("bstract"),a("strong",[t._v("S")]),t._v("yntax"),a("strong",[t._v("T")]),t._v("ree，AST），或简称为语法树，是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。")]),t._v(" "),a("p",[t._v("也就是说，一个HTML标签转换成了一个JS对象，对象中的属性标识了标签中的属性信息，"),a("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("转换网站"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"_2-模板编译的具体流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-模板编译的具体流程"}},[t._v("#")]),t._v(" （2）模板编译的具体流程")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("模板解析阶段")]),t._v("：将一堆模板字符串用正则表达式等方式解析成抽象语法树AST；")]),t._v(" "),a("p",[t._v("模板解析阶段-------解析器 "),a("strong",[t._v("源码：src/compiler/parser/index.js")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("优化阶段")]),t._v("：遍历AST，找出其中的静态节点，并打上标记；")]),t._v(" "),a("p",[t._v("优化阶段-------优化器  "),a("strong",[t._v("源码：src/compiler/optimizer.js")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("代码生成阶段")]),t._v("：将AST转换成渲染函数；")]),t._v(" "),a("p",[t._v("代码生成阶段-------代码生成器  "),a("strong",[t._v("源码：src/compiler/codegen/index.js")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("编译器的入口文件：源码：src/compiler/index.js")])]),t._v(" "),a("p",[a("u",[t._v("src/compiler/index.js：")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源码位置: /src/complier/index.js")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createCompiler "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCompilerCreator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("baseCompile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" CompilerOptions")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" CompiledResult "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模板解析阶段：用正则等方式解析 template 模板中的指令、class、style等数据，形成AST")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("optimize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优化阶段：遍历AST，找出其中的静态节点，并打上标记；")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("optimize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//optimize的主要作用是标记静态节点，这是Vue在编译过程中的一处优化，挡在进行patch的过程中，DOM-diff算法会直接跳过静态节点，从而减少了比较的过程，优化了patch的性能。")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码生成阶段：将AST转换成渲染函数；")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将AST转化成render函数字符串的过程，得到结果是render函数 的字符串以及staticRenderFns字符串")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//抽象语法树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//渲染函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("staticRenderFns")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最后返回了一个对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/3.15d9566b.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_1、模板解析阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、模板解析阶段"}},[t._v("#")]),t._v(" 1、模板解析阶段")]),t._v(" "),a("blockquote",[a("p",[t._v("解析器，顾名思义，就是把用户所写的模板根据一定的解析规则解析出有效的信息，最后用这些信息形成AST。")]),t._v(" "),a("p",[a("strong",[t._v("源码：src/compiler/parser/index.js")])])]),t._v(" "),a("p",[t._v("parse函数就是解析器的主函数，在parse函数内调用了"),a("code",[t._v("parseHTML")]),t._v("函数对模板字符串进行解析，在parseHTML函数解析模板字符串的过程中，如果遇到文本信息，就会调用文本解析器"),a("code",[t._v("parseText")]),t._v("函数进行文本解析；如果遇到文本中包含过滤器，就会调用过滤器解析器 "),a("code",[t._v("parseFilters")]),t._v("函数进行解析。")]),t._v(" "),a("h3",{attrs:{id:"_1-模板解析的整体运行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-模板解析的整体运行流程"}},[t._v("#")]),t._v(" （1）模板解析的整体运行流程")]),t._v(" "),a("ul",[a("li",[t._v("模板解析其实就是根据被解析内容的特点使用正则等方式将有效信息解析提取出来")]),t._v(" "),a("li",[t._v("根据解析内容的不同分为HTML解析器，文本解析器和过滤器解析器。")]),t._v(" "),a("li",[t._v("而文本信息与过滤器信息又存在于HTML标签中，所以在解析器主线函数 "),a("code",[t._v("parse")]),t._v("中先调用HTML解析器 "),a("code",[t._v("parseHTML")]),t._v("函数对模板字符串进行解析，如果在解析过程中遇到文本或过滤器信息则再调用相应的解析器进行解析。")]),t._v(" "),a("li",[t._v("最终完成对整个模板字符串的解析。")])]),t._v(" "),a("h3",{attrs:{id:"_2-html解析器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-html解析器"}},[t._v("#")]),t._v(" （2）HTML解析器")]),t._v(" "),a("p",[t._v("HTML解析器主要负责解析出模板字符串中有哪些内容，然后根据不同的内容才能调用其他的解析器以及做相应的处理，所以说HTML解析器是最重要的一个部分。")]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"html解析器是如何解析出模板字符串中包含的不同的内容的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html解析器是如何解析出模板字符串中包含的不同的内容的"}},[t._v("#")]),t._v(" "),a("strong",[t._v("HTML解析器是如何解析出模板字符串中包含的不同的内容的？")])])]),t._v(" "),a("p",[a("strong",[t._v("源码：/src/complier/parser/index.js")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Convert HTML string to AST.\n * 将HTML模板字符串转化为AST\n \t\t- template:待转换的模板字符串；\n\t\t- options:转换时所需的选项；\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    warn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("expectHTML")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expectHTML"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("isUnaryTag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isUnaryTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("canBeLeftOpenTag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("canBeLeftOpenTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("shouldDecodeNewlines")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlines"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("shouldDecodeNewlinesForHref")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlinesForHref"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("shouldKeepComment")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("comments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当解析到开始标签时，调用该函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标签名tag、标签属性attrs、标签是否自闭合unary")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当解析到结束标签时，调用该函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当解析到文本时，调用该函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chars")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当解析到注释时，调用该函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("comment")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br")])]),a("p",[t._v("在parse中定义了4个钩子，用来把parseHTML提取出来的内容转化成AST")]),t._v(" "),a("ol",[a("li",[t._v("当解析到开始标签时调用 "),a("code",[t._v("start")]),t._v("函数生成元素类型的 "),a("code",[t._v("AST")]),t._v("节点。\n"),a("ul",[a("li",[a("code",[t._v("start")]),t._v("函数接收三个参数，分别是标签名tag、标签属性attr、标签是否自闭合 unary。当调用该钩子函数时，内部会调用 "),a("code",[t._v("createASTElement")]),t._v("函数来创建元素类型的 "),a("code",[t._v("AST")]),t._v("节点。")])])]),t._v(" "),a("li",[t._v("当解析到结束标签时调用 "),a("code",[t._v("end")]),t._v("函数")]),t._v(" "),a("li",[t._v("当解析到文本时调用 "),a("code",[t._v("chars")]),t._v("函数生成文本类型的 "),a("code",[t._v("AST")]),t._v("节点\n"),a("ul",[a("li",[t._v("当解析到标签的文本时，触发 "),a("code",[t._v("chars")]),t._v("钩子函数，在该钩子函数内部，首先会判断文本是不是一个带变量的动态文本，如“hello”。如果是动态文本，则创建动态文本类型的 "),a("code",[t._v("AST")]),t._v("节点；如果不是动态文本，则创建纯静态文本类型的 "),a("code",[t._v("AST")]),t._v("节点。")])])]),t._v(" "),a("li",[t._v("当解析到注释时调用 "),a("code",[t._v("comment")]),t._v("函数生成注释类型的 "),a("code",[t._v("AST")]),t._v("节点")])]),t._v(" "),a("p",[t._v("一边解析不同的内容一边调用对应的钩子函数生成对应的AST节点，最终完成将整个模板字符串转化为 "),a("code",[t._v("AST")]),t._v("，这就是 HTML解析器要做的工作。")]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"模板字符串中包含了哪些内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板字符串中包含了哪些内容"}},[t._v("#")]),t._v(" 模板字符串中包含了哪些内容？")])]),t._v(" "),a("ul",[a("li",[t._v("文本，例如“天道酬勤”")]),t._v(" "),a("li",[t._v("HTML注释，例如")]),t._v(" "),a("li",[t._v("条件注释，例如"),t._v("我是注释")]),t._v(" "),a("li",[t._v("DOCTYPE，例如<!DOCTYPE html>")]),t._v(" "),a("li",[t._v("开始标签，例如"),a("div")]),t._v(" "),a("li",[t._v("结束标签，例如")])]),t._v(" "),a("p",[a("strong",[t._v("如何解析不同内容")]),t._v("？")]),t._v(" "),a("p",[t._v("根据每个类型的模板字符串的不同特点，进行相应的解析")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析HTML注释")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" comment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^<!\\--")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" commentEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--\x3e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析条件注释")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" conditionalComment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^<!\\[")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" conditionalEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("']>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析DOCTYPE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" doctype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^<!DOCTYPE [^>]+>")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),t._v("\n             \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析开始标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ncname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[a-zA-Z_][\\\\w\\\\-\\\\.]*'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" qnameCapture "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("((?:")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ncname"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\\\:)?")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ncname"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startTagOpen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("^<")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("qnameCapture"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTagOpen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tagName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("attrs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" index\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 解析标签属性")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 解析标签是否闭合")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br")])]),a("blockquote",[a("h4",{attrs:{id:"如何保证ast节点的层级关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证ast节点的层级关系"}},[t._v("#")]),t._v(" 如何保证AST节点的层级关系？")])]),t._v(" "),a("p",[a("strong",[t._v("通过栈维护AST节点的层级作用")])]),t._v(" "),a("p",[a("code",[t._v("HTML")]),t._v("解析器在从前向后解析模板字符串时，每当遇到开始标签时就会调用 "),a("code",[t._v("start")]),t._v("钩子函数。")]),t._v(" "),a("p",[t._v("那么在 start钩子函数内部我们可以将解析得到的开始标签推入栈中。")]),t._v(" "),a("p",[t._v("每当遇到结束标签时就会调用 "),a("code",[t._v("end")]),t._v("钩子函数。")]),t._v(" "),a("p",[t._v("那么我们也可以在 "),a("code",[t._v("end")]),t._v("钩子函数内部解析得到的结束标签所对应的开始标签从栈中弹出。")]),t._v(" "),a("p",[a("strong",[t._v("总结")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("HTML解析器的工作流程，一句话概括就是："),a("strong",[t._v("一边解析不同的内容一边调用对应的钩子函数生成对应的AST节点，最终完成将整个模板字符串转化为AST")]),t._v("。")]),t._v(" "),a("li",[t._v("HTML解析器是如何解析用户所写的模板字符串中各种类型的内容的，把各种类型的解析方式都分别进行了介绍。")]),t._v(" "),a("li",[t._v("在解析器内维护了一个栈，用来保证构建的AST节点层级与真正DOM层级一致。")])]),t._v(" "),a("h3",{attrs:{id:"_3-文本解析器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-文本解析器"}},[t._v("#")]),t._v(" （3）文本解析器")]),t._v(" "),a("p",[t._v("当 "),a("code",[t._v("HTML")]),t._v("解析器解析到文本内容时会调用4个钩子函数中的 "),a("code",[t._v("chars")]),t._v("函数来创建文本型的 "),a("code",[t._v("AST")]),t._v("节点，并且也说了在 "),a("code",[t._v("chars")]),t._v("函数中会根据文本内容是否包含变量再细分为创建含有变量的 "),a("code",[t._v("AST")]),t._v("节点和不包含变量的 "),a("code",[t._v("AST")]),t._v("节点。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我叫{{name}}，我今年{{age}}岁了"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析后")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseText")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nres "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("expression")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我叫"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"，我今年"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"岁了"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tokens")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我叫"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'@binding'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"，我今年"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'@binding'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"岁了"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("expression属性就是把文本中的变量和非变量提取出来，然后把变量用 "),a("code",[t._v("_s()")]),t._v("包裹，最后按照文本里的顺序把他们用 "),a("code",[t._v("+")]),t._v("连接起来。而 "),a("code",[t._v("tokens")]),t._v("是个数组，数组内容也是文本中的变量和非变量，不一样的是把变量构造成 "),a("code",[t._v("{‘@binding':XXX}")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("文本构造器")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("判断传入的文本是否包含变量")]),t._v(" "),a("li",[t._v("构造expression")]),t._v(" "),a("li",[t._v("构造tokens")])]),t._v(" "),a("h2",{attrs:{id:"_2、优化阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、优化阶段"}},[t._v("#")]),t._v(" 2、优化阶段")]),t._v(" "),a("p",[a("strong",[t._v("源码：src/compiler/optimizer.js")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("optimize")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("ASTElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" CompilerOptions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  isStaticKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("genStaticKeysCached")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticKeys "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  isPlatformReservedTag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isReservedTag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标记静态节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("markStatic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标记静态根节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("markStaticRoots")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("静态节点在经过一次渲染之后就不会再渲染了，这也就是优化阶段主要做的事情。")]),t._v(" "),a("p",[t._v("在模板编译的时候就先找出模板中所有的静态节点和静态根节点，然后给它们打上标记，用于告诉后面patch过程打了标记的这些节点是不需要对比的，只要把它们克隆一份去用就好了。这就是优化阶段存在的意义。")]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"优化阶段所做的事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化阶段所做的事"}},[t._v("#")]),t._v(" 优化阶段所做的事")])]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("在 "),a("code",[t._v("AST")]),t._v("中找出所有静态节点并打上标记；")])]),t._v(" "),a("p",[t._v("从根节点开始，先标记根节点是否为静态节点，然后看根节点如果是元素节点，那么就去向下递归它的子节点，子节点如果还有子节点那就继续向下递归，直到标记完所有节点。")]),t._v(" "),a("ul",[a("li",[t._v("如果节点使用了 "),a("code",[t._v("v-pre")]),t._v("指令，那就断定它是静态节点")]),t._v(" "),a("li",[t._v("如果节点没有使用 "),a("code",[t._v("v-pre")]),t._v("指令，那么它要成为静态节点必须满足：\n"),a("ul",[a("li",[t._v("不能使用动态绑定语法，即标签上不能有 "),a("code",[t._v("v-")]),t._v("、"),a("code",[t._v("@")]),t._v("、"),a("code",[t._v(":")]),t._v("开头的属性；")]),t._v(" "),a("li",[t._v("不能使用 "),a("code",[t._v("v-if")]),t._v("、"),a("code",[t._v("v-else")]),t._v("、"),a("code",[t._v("v-for")]),t._v("指令；")]),t._v(" "),a("li",[t._v("不能是内置组件，即标签名不能是 "),a("code",[t._v("slot")]),t._v("和 "),a("code",[t._v("component")]),t._v("；")]),t._v(" "),a("li",[t._v("标签名必须是平台保留标签，即不能是组件；")]),t._v(" "),a("li",[t._v("当前节点的父节点是不能带有 "),a("code",[t._v("v-for")]),t._v("的 "),a("code",[t._v("template")]),t._v("标签；")]),t._v(" "),a("li",[t._v("节点的所有属性的 "),a("code",[t._v("key")]),t._v("都必须是静态节点才有的 "),a("code",[t._v("key")]),t._v("，注：静态节点的 "),a("code",[t._v("key")]),t._v("是有限的，它只能是"),a("code",[t._v("type")]),t._v(","),a("code",[t._v("tag")]),t._v(","),a("code",[t._v("attrsList")]),t._v(","),a("code",[t._v("attrsMap")]),t._v(","),a("code",[t._v("plain")]),t._v(","),a("code",[t._v("parent")]),t._v(","),a("code",[t._v("children")]),t._v(","),a("code",[t._v("attrs")]),t._v("之一；")])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("在 "),a("code",[t._v("AST")]),t._v("中找出所有静态根节点并打上标记")]),t._v("；")]),t._v(" "),a("p",[t._v("寻找静态根节点和寻找静态节点的逻辑类似，都是从 "),a("code",[t._v("AST")]),t._v("根节点递归向下遍历寻找")]),t._v(" "),a("ul",[a("li",[t._v("节点本身必须是静态节点")]),t._v(" "),a("li",[t._v("必须拥有子节点 "),a("code",[t._v("children")])]),t._v(" "),a("li",[t._v("子节点不能只是只有一个文本节点；")])])])]),t._v(" "),a("h2",{attrs:{id:"_3、代码生成阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码生成阶段"}},[t._v("#")]),t._v(" 3、代码生成阶段")]),t._v(" "),a("p",[a("strong",[t._v("源码：src/compiler/codegen/index.js")])]),t._v(" "),a("p",[t._v("https://vue-js.com/learn-vue/complie/codegen.html#_1-%E5%89%8D%E8%A8%80")]),t._v(" "),a("p",[t._v("代码生成阶段主要就是生成 render函数字符串")]),t._v(" "),a("p",[t._v("所谓代码生成其实就是根据模板对应的抽象语法树 "),a("code",[t._v("AST")]),t._v("生成一个函数，通过调用这个函数就可以得到模板对应的虚拟DOM。")]),t._v(" "),a("p",[t._v("生成render函数的过程其实就是一个递归过程，从顶下一次递归 AST中的每一个节点，根据不同的 AST节点类型创建不同的 VNode类型。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("模板编译的最终目的就是："),a("strong",[t._v("把用户所写的模板转化成供Vue实例在挂载时可调用的render函数")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://vue-js.com/learn-vue/assets/img/8.ad277be0.jpg",alt:"img"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);