(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{598:function(t,s,a){"use strict";a.r(s);var e=a(13),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),a("h2",{attrs:{id:"_1-git-和-svn的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-和-svn的区别"}},[t._v("#")]),t._v(" 1. Git 和 svn的区别")]),t._v(" "),a("h3",{attrs:{id:"_1-git-和-svn-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-和-svn-的区别"}},[t._v("#")]),t._v(" 1. git 和 svn 的区别")]),t._v(" "),a("ul",[a("li",[t._v("git 和 svn 最大的区别在于 git 是分布式的，而 svn 是集中式的。因此我们不能再离线的情况下使用 svn。如果服务器出现问题，就没有办法使用 svn 来提交代码。")]),t._v(" "),a("li",[t._v("svn 中的分支是整个版本库的复制的一份完整目录，而 git 的分支是指针指向某次提交，因此 git 的分支创建更加开销更小并且分支上的变化不会影响到其他人。svn 的分支变化会影响到所有的人。")]),t._v(" "),a("li",[t._v("svn 的指令相对于 git 来说要简单一些，比 git 更容易上手。")]),t._v(" "),a("li",[t._v("**Git把内容按元数据方式存储，而SVN是按文件：**因为git目录是处于个人机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。")]),t._v(" "),a("li",[t._v("**Git分支和SVN的分支不同：**svn会发生分支遗漏的情况，而git可以同一个工作目录下快速的在几个分支间切换，很容易发现未被合并的分支，简单而快捷的合并这些文件。")]),t._v(" "),a("li",[a("strong",[t._v("Git没有一个全局的版本号，而SVN有")])]),t._v(" "),a("li",[t._v("**Git的内容完整性要优于SVN：**GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏")])]),t._v(" "),a("h2",{attrs:{id:"_2-经常使用的git命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-经常使用的git命令"}},[t._v("#")]),t._v(" 2. 经常使用的git命令")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git init                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新建 git 代码库")]),t._v("\ngit add                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加指定文件到暂存区")]),t._v("\ngit rm                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除工作区文件，并且将这次删除放入暂存区")]),t._v("\ngit commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提交暂存区到仓库区")]),t._v("\ngit branch                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 列出所有分支")]),t._v("\ngit checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新建一个分支，并切换到该分支")]),t._v("\ngit status                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显示有变更文件的状态")]),t._v("\ngit push                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//提交到远程仓库")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h2",{attrs:{id:"_3-git-pull-和-git-fetch的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-git-pull-和-git-fetch的区别"}},[t._v("#")]),t._v(" 3. git pull 和 git fetch的区别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git fetch")]),t._v("只是将远程仓库的变化下载下来，并没有和本地分支合并。")]),t._v(" "),a("li",[a("code",[t._v("git pull")]),t._v(" 会将远程仓库的变化下载下来，并和当前分支合并。")])]),t._v(" "),a("h2",{attrs:{id:"_4-git-rebase-和-git-merge-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-git-rebase-和-git-merge-的区别"}},[t._v("#")]),t._v(" 4. git rebase 和 git merge 的区别")]),t._v(" "),a("p",[t._v("git merge 和 git rebase 都是用于分支合并，关键 "),a("strong",[t._v("在commit记录的处理上不同")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("git merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会保留之前每个分支的 commit 历史。")]),t._v(" "),a("li",[t._v("git rebase 会先找到两个分支的第一个共同的 commit 祖先记录，然后将提取当前分支这之后的所有 commit 记录，然后将这个 commit 记录添加到目标分支的最新提交后面。经过这个合并后，两个分支合并后的 commit 记录就变为了线性的记录了。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);